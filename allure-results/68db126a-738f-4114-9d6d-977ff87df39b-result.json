{"name": "test_verify_order_details_are_shown_on_the_details_page[rahulsingh@test.com-Test@1234]", "status": "failed", "statusDetails": {"message": "AssertionError: Failed to get token: 400 <bound method APIResponse.text of <APIResponse url='https://rahulshettyacademy.com/api/ecom/auth/login' status=400 status_text='Bad Request'>>", "trace": "fixturefunc = <function place_order at 0x00000248EE2F5CA8>\nrequest = <FixtureRequest for <Function test_verify_order_details_are_shown_on_the_details_page[rahulsingh@test.com-Test@1234]>>\nkwargs = {'password': 'Test@1234', 'playwright': <playwright._impl._playwright.Playwright object at 0x00000248EE3B0808>, 'shared_data': {}, 'username': 'rahulsingh@test.com'}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n.venv\\lib\\site-packages\\_pytest\\fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_hybrid_BDD.py:18: in place_order\n    order_id = api_utils.createOrder(playwright, user_credentials)\nutils\\ApiBase.py:19: in createOrder\n    response = api_req_context.post(\"api/ecom/order/create-order\", data=order_payLoad,headers ={\"Authorization\":self.get_token(playwright,user_credentials),\"Content-Type\":\"application/json\"})\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.ApiBase.API_Utils object at 0x00000248EE757B88>, playwright = <playwright._impl._playwright.Playwright object at 0x00000248EE3B0808>\nuser_credentials = {'password': 'Test@1234', 'userEmail': 'rahulsingh@test.com'}\n\n    def get_token(self, playwright: Playwright,user_credentials):\n    \n        api_req_context = playwright.request.new_context(base_url=self.base_url)\n        response = api_req_context.post(\"api/ecom/auth/login\", data={\"userEmail\": user_credentials['userEmail'], \"userPassword\": user_credentials['password']})\n>       assert response.ok, f\"Failed to get token: {response.status} {response.text}\"\nE       AssertionError: Failed to get token: 400 <bound method APIResponse.text of <APIResponse url='https://rahulshettyacademy.com/api/ecom/auth/login' status=400 status_text='Bad Request'>>\n\nutils\\ApiBase.py:14: AssertionError"}, "description": "C:\\Users\\Rahul\\PycharmProjects\\Playwright_FrameWork_from_Scratch\\features\\orders.feature: Verify order details are shown on the Details Page", "parameters": [{"name": "_pytest_bdd_example", "value": "{'username': 'rahulsingh@test.com', 'Password': 'Test@1234'}"}], "start": 1753076945026, "stop": 1753076945233, "uuid": "7df1361c-5baf-455a-817f-f4c4b333c634", "historyId": "94451d1d9cc3276c8fe8b90d638ff123", "testCaseId": "e8b9eaf5863bd7fd25bb9773867bbc81", "fullName": "test_hybrid_BDD#test_verify_order_details_are_shown_on_the_details_page", "labels": [{"name": "suite", "value": "test_hybrid_BDD"}, {"name": "host", "value": "DESKTOP-K4GP7T7"}, {"name": "thread", "value": "26908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_hybrid_BDD"}]}